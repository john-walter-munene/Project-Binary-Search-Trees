/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Tree: () => (/* binding */ Tree),\n/* harmony export */   prettyPrint: () => (/* binding */ prettyPrint)\n/* harmony export */ });\n// Object Oriented approach to build a balanaced Binary Search Tree.\r\n\r\nclass Node {\r\n    constructor(data){\r\n        this.data = data;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\nclass Tree {\r\n    constructor(array) {\r\n        this.array = this.mergeSort(this.removeDuplicate(array));\r\n        this.root = this.buildTree(this.array);\r\n    }\r\n\r\n    removeDuplicate(array) {\r\n        // Exit if this is not an array.\r\n        if (!Array.isArray(array)) return;\r\n        return [...new Set(array)];\r\n    }\r\n\r\n    mergeSort(array, low = 0, high = array.length - 1) {\r\n        if (low < high) {\r\n\r\n            // Find middle point.\r\n            let middle = Math.floor((low + high) / 2);\r\n    \r\n            // Recursive sort both halves.\r\n            this.mergeSort(array, low, middle);\r\n            this.mergeSort(array, middle + 1, high);\r\n    \r\n            // Create copies of the subarrays\r\n            let leftArray = array.slice(low, middle + 1);\r\n            let rightArray = array.slice(middle + 1, high + 1);\r\n    \r\n            // Merge the arrays\r\n            let i = 0, j = 0, k = low;\r\n            while (i < leftArray.length && j < rightArray.length) {\r\n                if (leftArray[i] <= rightArray[j]) {\r\n                    array[k++] = leftArray[i++];\r\n                } else {\r\n                    array[k++] = rightArray[j++];\r\n                }\r\n            }\r\n    \r\n            // Copy remaining elements of leftArray, if any\r\n            while (i < leftArray.length) {\r\n                array[k++] = leftArray[i++];\r\n            }\r\n    \r\n             // Copy remaining elements of rightArray, if any\r\n            while (j < rightArray.length) {\r\n                array[k++] = rightArray[j++];\r\n            }\r\n        }\r\n    \r\n        return array;\r\n    }\r\n\r\n    buildTree(array, start = 0, end = array.length - 1) {\r\n        if (start > end) return null;\r\n\r\n        // Find middle element.\r\n        let mid = start + Math.floor((end - start) / 2);\r\n\r\n        // Create root node\r\n        let root = new Node(array[mid]);\r\n\r\n        // Create left and right subtrees.\r\n        root.left = this.buildTree(array, start, mid - 1);\r\n        root.right = this.buildTree(array, mid + 1, end);\r\n\r\n        return root;\r\n    }\r\n\r\n    insert(nodeData, currentNode = this.root) {\r\n        // If the tree is empty, initialize root with a new node.\r\n        if (this.root === null) {\r\n            this.root = new Node(nodeData);\r\n            return this.root;\r\n        }\r\n    \r\n        // If currentNode is null, return a new node (should not happen in typical usage).\r\n        if (currentNode === null) {\r\n            return new Node(nodeData);\r\n        }\r\n    \r\n        // Handle duplicates.\r\n        if (nodeData === currentNode.data) {\r\n            return currentNode;\r\n        } \r\n    \r\n        // Insert into the left or right subtree based on nodeData comparison.\r\n        if (nodeData < currentNode.data) {\r\n            if (currentNode.left === null) {\r\n                currentNode.left = new Node(nodeData); // Insert in left subtree.\r\n            } else {\r\n                this.insert(nodeData, currentNode.left); // Recur on left subtree.\r\n            }\r\n        } else if (nodeData > currentNode.data) {\r\n            if (currentNode.right === null) {\r\n                currentNode.right = new Node(nodeData); // Insert in right subtree.\r\n            } else {\r\n                this.insert(nodeData, currentNode.right); // Recur on right subtree.\r\n            }\r\n        }\r\n    \r\n        return currentNode;\r\n    }    \r\n    \r\n    delete(nodeData, currentNode = this.root) {\r\n        // Base case: If the node is null, return null (nodeData not found).\r\n        if (currentNode === null) return null;\r\n    \r\n        // Traverse to the correct node for deletion.\r\n        if (nodeData < currentNode.data) {\r\n            currentNode.left = this.delete(nodeData, currentNode.left);  // Recursively delete in the left subtree.\r\n        } else if (nodeData > currentNode.data) {\r\n            currentNode.right = this.delete(nodeData, currentNode.right);  // Recursively delete in the right subtree.\r\n        } \r\n    \r\n        // Node found: Handle the three deletion cases.\r\n        if (nodeData === currentNode.data) {\r\n            // Case 1: Leaf node (no children).\r\n            if (currentNode.left === null && currentNode.right === null) {\r\n                return null;\r\n            }\r\n    \r\n            // Case 2: Node with only one child.\r\n            if (currentNode.left === null) {\r\n                return currentNode.right;\r\n            }\r\n            if (currentNode.right === null) {\r\n                return currentNode.left;\r\n            }\r\n    \r\n            // Case 3: Node with two children.\r\n            let successorNode = this.getSuccessor(currentNode);\r\n            currentNode.data = successorNode.data;\r\n            currentNode.right = this.delete(successorNode.data, currentNode.right);  // Remove successor.\r\n        }\r\n    \r\n        return currentNode;  // Return the updated node to maintain the tree structure.\r\n    }\r\n    \r\n    getSuccessor(currentNode) {\r\n        let temp = currentNode.right;\r\n        while(temp !== null && temp.left !== null) {\r\n            temp = temp.left;\r\n        }\r\n        return temp;\r\n    }\r\n\r\n    find(nodeData, currentNode = this.root) {\r\n        // Base case: If the current node is null, return null (nodeData not found).\r\n        if (currentNode === null) return null;\r\n    \r\n        // If the nodeData is found, return the current node.\r\n        if (nodeData === currentNode.data) {\r\n            return currentNode;\r\n        }\r\n    \r\n        // Traverse left or right based on the nodeData comparison.\r\n        if (nodeData < currentNode.data) {\r\n            return this.find(nodeData, currentNode.left);  // Search in the left subtree.\r\n        } else {\r\n            return this.find(nodeData, currentNode.right);  // Search in the right subtree.\r\n        }\r\n    }       \r\n\r\n    levelOrderIterative(callback) {\r\n        // Ensure function is called with a callback.\r\n        if (!callback) throw new Error(\"A callback is required to run this method!\");\r\n        if (typeof callback !== 'function') throw new Error(\"A callback provided must be a function!\");\r\n\r\n        let rootNode = this.root;\r\n        // Base case if root node is null exit traversal.\r\n        if (rootNode === null) return;\r\n\r\n        let nodeQueue = [];\r\n        nodeQueue.push(rootNode);\r\n\r\n        while(nodeQueue.length) {\r\n            // Get first node from queue, remove it, process its data via callback and enque its children.\r\n            let currentNode = nodeQueue.shift();\r\n            callback(currentNode.data);\r\n            if (currentNode.left !== null) nodeQueue.push(currentNode.left);\r\n            if (currentNode.right !== null) nodeQueue.push(currentNode.right);\r\n        }\r\n\r\n    }\r\n\r\n    levelOrderRecursive(callback) {\r\n        // Ensure function is called with a callback.\r\n        if (!callback) throw new Error(\"A callback is required to run this method!\");\r\n        if (typeof callback !== 'function') throw new Error(\"A callback provided must be a function!\");\r\n    \r\n        // Base case if root node is null exit traversal.\r\n        let currentNode = this.root;\r\n        if (currentNode === null) return;\r\n    \r\n        let levelsInTree = this._treeHeight() + 1;\r\n        let levelTraversalCounter = 0;\r\n        while (levelTraversalCounter < levelsInTree) {\r\n            this._recursiveLevelOrderTraverser(levelTraversalCounter, callback);\r\n            levelTraversalCounter++;\r\n        }\r\n    }\r\n\r\n    testCallBack(data) {\r\n        console.log(data); // logs the data of the node.\r\n    }\r\n\r\n    _recursiveLevelOrderTraverser(targetLevel, callback, currentLevel = 0, currentNode = this.root) {\r\n        // If the node is null, just return.\r\n        if (currentNode === null) return;\r\n    \r\n        // Base case: If we've reached the target level, call the callback.\r\n        if (currentLevel === targetLevel) {\r\n            callback(currentNode.data);\r\n            return;\r\n        }\r\n    \r\n        // Traverse left and right subtrees with incremented level.\r\n        this._recursiveLevelOrderTraverser(targetLevel, callback, currentLevel + 1, currentNode.left);\r\n        this._recursiveLevelOrderTraverser(targetLevel, callback, currentLevel + 1, currentNode.right);\r\n    }    \r\n\r\n    _treeHeight(currentNode = this.root) {\r\n        if (currentNode === null) return -1;  // Base case for empty node\r\n        let leftHeight = this._treeHeight(currentNode.left);\r\n        let rightHeight = this._treeHeight(currentNode.right);\r\n        return Math.max(leftHeight, rightHeight) + 1;\r\n    }\r\n\r\n    depth(nodeData, currentNode = this.root) {\r\n        // Base case if root is null, return -1.\r\n        if (currentNode === null) return -1;\r\n    \r\n        // Base case if node is found, return 0.\r\n        if (nodeData === currentNode.data) return 0;\r\n        \r\n        // Handle left and right sub-branches.\r\n        if (nodeData < currentNode.data) return 1 + this.depth(nodeData, currentNode.left);\r\n        if (nodeData > currentNode.data) return 1 + this.depth(nodeData, currentNode.right);\r\n    }    \r\n    \r\n    height(nodeData, currentNode = this.root) {\r\n        if (currentNode === null) return -1;  // Base case for empty node\r\n    \r\n        let leftHeight = this.height(nodeData, currentNode.left);\r\n        let rightHeight = this.height(nodeData, currentNode.right);\r\n    \r\n        let largestOfHeights = Math.max(leftHeight, rightHeight) + 1;\r\n    \r\n        if (nodeData === currentNode.data) return largestOfHeights;\r\n    \r\n        return Math.max(leftHeight, rightHeight);\r\n    }  \r\n\r\n    inOrder(callback) {\r\n        if (!callback) throw new Error(\"A callback is required to run this method!\");\r\n        if (typeof callback !== 'function') throw new Error(\"A callback provided must be a function!\");\r\n        this._inOrderTraverser(callback);\r\n    }\r\n\r\n    _inOrderTraverser(callback, currentNode = this.root) {\r\n        // Base case if root is null, return.\r\n        if (currentNode === null) return;\r\n\r\n        if (currentNode.left) this._inOrderTraverser(callback, currentNode.left);\r\n        callback(currentNode.data);\r\n        if (currentNode.right) this._inOrderTraverser(callback, currentNode.right);\r\n    }\r\n    \r\n    preOrder(callback) {\r\n        if (!callback) throw new Error(\"A callback is required to run this method!\");\r\n        if (typeof callback !== 'function') throw new Error(\"A callback provided must be a function!\");\r\n        this._preOrderTraverser(callback);\r\n    }\r\n\r\n    _preOrderTraverser(callback, currentNode = this.root) {\r\n        // Base case if root is null.\r\n        if (currentNode === null) return;\r\n\r\n        // Process root first.\r\n        callback(currentNode.data);\r\n\r\n        // Visit left and right subtrees\r\n        if (currentNode.left) this._preOrderTraverser(callback, currentNode.left);\r\n        if (currentNode.right) this._preOrderTraverser(callback, currentNode.right);\r\n    }\r\n\r\n    postOrder(callback) {\r\n        if (!callback) throw new Error(\"A callback is required to run this method!\");\r\n        if (typeof callback !== 'function') throw new Error(\"A callback provided must be a function!\");\r\n        this._postOrderTraverser(callback);\r\n    }\r\n\r\n    _postOrderTraverser(callback, currentNode = this.root) {\r\n        if (currentNode === null) return;\r\n        if (currentNode.left) this._postOrderTraverser(callback, currentNode.left);\r\n        if (currentNode.right) this._postOrderTraverser(callback, currentNode.right);\r\n        callback(currentNode.data);\r\n    }\r\n\r\n    isBalanced(currentNode = this.root) {\r\n        if (currentNode === null) return true; // Base case: empty node.\r\n    \r\n        let leftHeight = this._treeHeight(currentNode.left);\r\n        let rightHeight = this._treeHeight(currentNode.right);\r\n    \r\n        if (Math.abs(leftHeight - rightHeight) > 1) return false;\r\n        \r\n        // Recursively check the balance of the left and right subtrees\r\n        return this.isBalanced(currentNode.left) && this.isBalanced(currentNode.right);\r\n    }\r\n\r\n    rebalance() {\r\n        if (this.root === null || this.isBalanced()) return this.root; // return the root if already balanced or empty.\r\n        \r\n        let newArray = [];\r\n        const populateNewArray = (value) => newArray.push(value);\r\n        \r\n        // Populate newArray with an in-order traversal\r\n        this.inOrder(populateNewArray);\r\n        \r\n        // Rebuild the tree after sorting and removing duplicates\r\n        const sortedArray = this.mergeSort(this.removeDuplicate(newArray));\r\n        this.root = this.buildTree(sortedArray);\r\n        return this.root;\r\n    }    \r\n    \r\n}\r\n\r\nconst testArray = [1, 7, 4, 23, 8, 9, 4, 3, 5, 7, 9, 67, 6345, 324];\r\nconst testTree = new Tree(testArray).root;\r\n\r\nconst prettyPrint = (node, prefix = \"\", isLeft = true) => {\r\n    if (node === null) {\r\n      return;\r\n    }\r\n    if (node.right !== null) {\r\n      prettyPrint(node.right, `${prefix}${isLeft ? \"│   \" : \"    \"}`, false);\r\n    }\r\n    console.log(`${prefix}${isLeft ? \"└── \" : \"┌── \"}${node.data}`);\r\n    if (node.left !== null) {\r\n      prettyPrint(node.left, `${prefix}${isLeft ? \"    \" : \"│   \"}`, true);\r\n    }\r\n  }; \r\n\r\n// prettyPrint(testTree);\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/app.js\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./app */ \"./src/app.js\");\n\r\n\r\nfunction randomNumArray(min, max) {\r\n    let numbersCount = 15; // You can adjust the number of elements\r\n    let array = [];\r\n    for (let counter = 0; counter < numbersCount; counter++) {\r\n        // Generating random integers between min and max\r\n        array.push(Math.floor(Math.random() * (max - min + 1)) + min);\r\n    }\r\n    return array;\r\n}\r\n\r\nconst randomNumbers = randomNumArray(0, 100);\r\nconsole.log(randomNumbers);\r\nconst testTree = new _app__WEBPACK_IMPORTED_MODULE_0__.Tree(randomNumbers);\r\n(0,_app__WEBPACK_IMPORTED_MODULE_0__.prettyPrint)(testTree.root);\r\nconsole.log(testTree.isBalanced());\r\n// console.log(\"Iterative Level Order Traversal\");\r\n// testTree.levelOrderIterative(console.log);\r\n// console.log(\"Recursive level order traversal\");\r\n// testTree.levelOrderRecursive(console.log);\r\n// console.log(\"Preorder traversal\");\r\n// testTree.preOrder(console.log);\r\n// console.log(\"Post order traversal\");\r\n// testTree.postOrder(console.log);\r\n// console.log(\"In Order Traversal\");\r\n// testTree.inOrder(console.log);\r\nlet newRandomNumbers = randomNumArray(100, 200);\r\nnewRandomNumbers.forEach(number => testTree.insert(number));\r\nconsole.log(testTree.isBalanced());\r\ntestTree.rebalance();\r\nconsole.log(testTree.isBalanced());\r\n(0,_app__WEBPACK_IMPORTED_MODULE_0__.prettyPrint)(testTree.root);\r\n// console.log(\"Iterative Level Order Traversal\");\r\n// testTree.levelOrderIterative(console.log);\r\n// console.log(\"Preorder traversal\");\r\n// testTree.preOrder(console.log);\r\n// console.log(\"Post order traversal\");\r\n// testTree.postOrder(console.log);\r\n// console.log(\"In Order Traversal\");\r\n// testTree.inOrder(console.log);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7QUFBMEM7QUFDMUM7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBLDBCQUEwQix3QkFBd0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixzQ0FBSTtBQUN6QixpREFBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGV2c3RhcnRidWlsZGluZy8uL3NyYy9pbmRleC5qcz9iNjM1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyZWUsIHByZXR0eVByaW50IH0gZnJvbSBcIi4vYXBwXCI7XHJcblxyXG5mdW5jdGlvbiByYW5kb21OdW1BcnJheShtaW4sIG1heCkge1xyXG4gICAgbGV0IG51bWJlcnNDb3VudCA9IDE1OyAvLyBZb3UgY2FuIGFkanVzdCB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzXHJcbiAgICBsZXQgYXJyYXkgPSBbXTtcclxuICAgIGZvciAobGV0IGNvdW50ZXIgPSAwOyBjb3VudGVyIDwgbnVtYmVyc0NvdW50OyBjb3VudGVyKyspIHtcclxuICAgICAgICAvLyBHZW5lcmF0aW5nIHJhbmRvbSBpbnRlZ2VycyBiZXR3ZWVuIG1pbiBhbmQgbWF4XHJcbiAgICAgICAgYXJyYXkucHVzaChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluKTtcclxuICAgIH1cclxuICAgIHJldHVybiBhcnJheTtcclxufVxyXG5cclxuY29uc3QgcmFuZG9tTnVtYmVycyA9IHJhbmRvbU51bUFycmF5KDAsIDEwMCk7XHJcbmNvbnNvbGUubG9nKHJhbmRvbU51bWJlcnMpO1xyXG5jb25zdCB0ZXN0VHJlZSA9IG5ldyBUcmVlKHJhbmRvbU51bWJlcnMpO1xyXG5wcmV0dHlQcmludCh0ZXN0VHJlZS5yb290KTtcclxuY29uc29sZS5sb2codGVzdFRyZWUuaXNCYWxhbmNlZCgpKTtcclxuLy8gY29uc29sZS5sb2coXCJJdGVyYXRpdmUgTGV2ZWwgT3JkZXIgVHJhdmVyc2FsXCIpO1xyXG4vLyB0ZXN0VHJlZS5sZXZlbE9yZGVySXRlcmF0aXZlKGNvbnNvbGUubG9nKTtcclxuLy8gY29uc29sZS5sb2coXCJSZWN1cnNpdmUgbGV2ZWwgb3JkZXIgdHJhdmVyc2FsXCIpO1xyXG4vLyB0ZXN0VHJlZS5sZXZlbE9yZGVyUmVjdXJzaXZlKGNvbnNvbGUubG9nKTtcclxuLy8gY29uc29sZS5sb2coXCJQcmVvcmRlciB0cmF2ZXJzYWxcIik7XHJcbi8vIHRlc3RUcmVlLnByZU9yZGVyKGNvbnNvbGUubG9nKTtcclxuLy8gY29uc29sZS5sb2coXCJQb3N0IG9yZGVyIHRyYXZlcnNhbFwiKTtcclxuLy8gdGVzdFRyZWUucG9zdE9yZGVyKGNvbnNvbGUubG9nKTtcclxuLy8gY29uc29sZS5sb2coXCJJbiBPcmRlciBUcmF2ZXJzYWxcIik7XHJcbi8vIHRlc3RUcmVlLmluT3JkZXIoY29uc29sZS5sb2cpO1xyXG5sZXQgbmV3UmFuZG9tTnVtYmVycyA9IHJhbmRvbU51bUFycmF5KDEwMCwgMjAwKTtcclxubmV3UmFuZG9tTnVtYmVycy5mb3JFYWNoKG51bWJlciA9PiB0ZXN0VHJlZS5pbnNlcnQobnVtYmVyKSk7XHJcbmNvbnNvbGUubG9nKHRlc3RUcmVlLmlzQmFsYW5jZWQoKSk7XHJcbnRlc3RUcmVlLnJlYmFsYW5jZSgpO1xyXG5jb25zb2xlLmxvZyh0ZXN0VHJlZS5pc0JhbGFuY2VkKCkpO1xyXG5wcmV0dHlQcmludCh0ZXN0VHJlZS5yb290KTtcclxuLy8gY29uc29sZS5sb2coXCJJdGVyYXRpdmUgTGV2ZWwgT3JkZXIgVHJhdmVyc2FsXCIpO1xyXG4vLyB0ZXN0VHJlZS5sZXZlbE9yZGVySXRlcmF0aXZlKGNvbnNvbGUubG9nKTtcclxuLy8gY29uc29sZS5sb2coXCJQcmVvcmRlciB0cmF2ZXJzYWxcIik7XHJcbi8vIHRlc3RUcmVlLnByZU9yZGVyKGNvbnNvbGUubG9nKTtcclxuLy8gY29uc29sZS5sb2coXCJQb3N0IG9yZGVyIHRyYXZlcnNhbFwiKTtcclxuLy8gdGVzdFRyZWUucG9zdE9yZGVyKGNvbnNvbGUubG9nKTtcclxuLy8gY29uc29sZS5sb2coXCJJbiBPcmRlciBUcmF2ZXJzYWxcIik7XHJcbi8vIHRlc3RUcmVlLmluT3JkZXIoY29uc29sZS5sb2cpOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;