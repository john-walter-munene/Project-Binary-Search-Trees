/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/***/ (() => {

eval("class Node {\r\n    constructor(data){\r\n        this.data = data;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\nclass Tree {\r\n    constructor(array) {\r\n        this.array = this.mergeSort(this.removeDuplicate(array));\r\n        this.root = this.buildTree(this.array);\r\n    }\r\n\r\n    removeDuplicate(array) {\r\n        // Exit if this is not an array.\r\n        if (!Array.isArray(array)) return;\r\n        return [...new Set(array)];\r\n    }\r\n\r\n    mergeSort(array, low = 0, high = array.length - 1) {\r\n        if (low < high) {\r\n\r\n            // Find middle point.\r\n            let middle = Math.floor((low + high) / 2);\r\n    \r\n            // Recursive sort both halves.\r\n            this.mergeSort(array, low, middle);\r\n            this.mergeSort(array, middle + 1, high);\r\n    \r\n            // Create copies of the subarrays\r\n            let leftArray = array.slice(low, middle + 1);\r\n            let rightArray = array.slice(middle + 1, high + 1);\r\n    \r\n            // Merge the arrays\r\n            let i = 0, j = 0, k = low;\r\n            while (i < leftArray.length && j < rightArray.length) {\r\n                if (leftArray[i] <= rightArray[j]) {\r\n                    array[k++] = leftArray[i++];\r\n                } else {\r\n                    array[k++] = rightArray[j++];\r\n                }\r\n            }\r\n    \r\n            // Copy remaining elements of leftArray, if any\r\n            while (i < leftArray.length) {\r\n                array[k++] = leftArray[i++];\r\n            }\r\n    \r\n             // Copy remaining elements of rightArray, if any\r\n            while (j < rightArray.length) {\r\n                array[k++] = rightArray[j++];\r\n            }\r\n        }\r\n    \r\n        return array;\r\n    }\r\n\r\n    buildTree(array, start = 0, end = array.length - 1) {\r\n        if (start > end) return null;\r\n\r\n        // Find middle element.\r\n        let mid = start + Math.floor((end - start) / 2);\r\n\r\n        // Create root node\r\n        let root = new Node(array[mid]);\r\n\r\n        // Create left and right subtrees.\r\n        root.left = this.buildTree(array, start, mid - 1);\r\n        root.right = this.buildTree(array, mid + 1, end);\r\n\r\n        return root;\r\n    }\r\n}\r\n\r\nconst testArray = [1, 7, 4, 23, 8, 9, 4, 3, 5, 7, 9, 67, 6345, 324];\r\nconst testTree = new Tree(testArray).root;\r\n\r\nconst prettyPrint = (node, prefix = \"\", isLeft = true) => {\r\n    if (node === null) {\r\n      return;\r\n    }\r\n    if (node.right !== null) {\r\n      prettyPrint(node.right, `${prefix}${isLeft ? \"│   \" : \"    \"}`, false);\r\n    }\r\n    console.log(`${prefix}${isLeft ? \"└── \" : \"┌── \"}${node.data}`);\r\n    if (node.left !== null) {\r\n      prettyPrint(node.left, `${prefix}${isLeft ? \"    \" : \"│   \"}`, true);\r\n    }\r\n  }; \r\n\r\nprettyPrint(testTree);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXBwLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxPQUFPLEVBQUUseUJBQXlCO0FBQ25FO0FBQ0EsbUJBQW1CLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxVQUFVO0FBQ2pFO0FBQ0EsZ0NBQWdDLE9BQU8sRUFBRSx5QkFBeUI7QUFDbEU7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXZzdGFydGJ1aWxkaW5nLy4vc3JjL2FwcC5qcz8xMTEyIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIE5vZGUge1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSl7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLmxlZnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucmlnaHQgPSBudWxsO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBUcmVlIHtcclxuICAgIGNvbnN0cnVjdG9yKGFycmF5KSB7XHJcbiAgICAgICAgdGhpcy5hcnJheSA9IHRoaXMubWVyZ2VTb3J0KHRoaXMucmVtb3ZlRHVwbGljYXRlKGFycmF5KSk7XHJcbiAgICAgICAgdGhpcy5yb290ID0gdGhpcy5idWlsZFRyZWUodGhpcy5hcnJheSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlRHVwbGljYXRlKGFycmF5KSB7XHJcbiAgICAgICAgLy8gRXhpdCBpZiB0aGlzIGlzIG5vdCBhbiBhcnJheS5cclxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSByZXR1cm47XHJcbiAgICAgICAgcmV0dXJuIFsuLi5uZXcgU2V0KGFycmF5KV07XHJcbiAgICB9XHJcblxyXG4gICAgbWVyZ2VTb3J0KGFycmF5LCBsb3cgPSAwLCBoaWdoID0gYXJyYXkubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgIGlmIChsb3cgPCBoaWdoKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBGaW5kIG1pZGRsZSBwb2ludC5cclxuICAgICAgICAgICAgbGV0IG1pZGRsZSA9IE1hdGguZmxvb3IoKGxvdyArIGhpZ2gpIC8gMik7XHJcbiAgICBcclxuICAgICAgICAgICAgLy8gUmVjdXJzaXZlIHNvcnQgYm90aCBoYWx2ZXMuXHJcbiAgICAgICAgICAgIHRoaXMubWVyZ2VTb3J0KGFycmF5LCBsb3csIG1pZGRsZSk7XHJcbiAgICAgICAgICAgIHRoaXMubWVyZ2VTb3J0KGFycmF5LCBtaWRkbGUgKyAxLCBoaWdoKTtcclxuICAgIFxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgY29waWVzIG9mIHRoZSBzdWJhcnJheXNcclxuICAgICAgICAgICAgbGV0IGxlZnRBcnJheSA9IGFycmF5LnNsaWNlKGxvdywgbWlkZGxlICsgMSk7XHJcbiAgICAgICAgICAgIGxldCByaWdodEFycmF5ID0gYXJyYXkuc2xpY2UobWlkZGxlICsgMSwgaGlnaCArIDEpO1xyXG4gICAgXHJcbiAgICAgICAgICAgIC8vIE1lcmdlIHRoZSBhcnJheXNcclxuICAgICAgICAgICAgbGV0IGkgPSAwLCBqID0gMCwgayA9IGxvdztcclxuICAgICAgICAgICAgd2hpbGUgKGkgPCBsZWZ0QXJyYXkubGVuZ3RoICYmIGogPCByaWdodEFycmF5Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGxlZnRBcnJheVtpXSA8PSByaWdodEFycmF5W2pdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbaysrXSA9IGxlZnRBcnJheVtpKytdO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhcnJheVtrKytdID0gcmlnaHRBcnJheVtqKytdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgLy8gQ29weSByZW1haW5pbmcgZWxlbWVudHMgb2YgbGVmdEFycmF5LCBpZiBhbnlcclxuICAgICAgICAgICAgd2hpbGUgKGkgPCBsZWZ0QXJyYXkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBhcnJheVtrKytdID0gbGVmdEFycmF5W2krK107XHJcbiAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICAgLy8gQ29weSByZW1haW5pbmcgZWxlbWVudHMgb2YgcmlnaHRBcnJheSwgaWYgYW55XHJcbiAgICAgICAgICAgIHdoaWxlIChqIDwgcmlnaHRBcnJheS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGFycmF5W2srK10gPSByaWdodEFycmF5W2orK107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICByZXR1cm4gYXJyYXk7XHJcbiAgICB9XHJcblxyXG4gICAgYnVpbGRUcmVlKGFycmF5LCBzdGFydCA9IDAsIGVuZCA9IGFycmF5Lmxlbmd0aCAtIDEpIHtcclxuICAgICAgICBpZiAoc3RhcnQgPiBlbmQpIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICAvLyBGaW5kIG1pZGRsZSBlbGVtZW50LlxyXG4gICAgICAgIGxldCBtaWQgPSBzdGFydCArIE1hdGguZmxvb3IoKGVuZCAtIHN0YXJ0KSAvIDIpO1xyXG5cclxuICAgICAgICAvLyBDcmVhdGUgcm9vdCBub2RlXHJcbiAgICAgICAgbGV0IHJvb3QgPSBuZXcgTm9kZShhcnJheVttaWRdKTtcclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIGxlZnQgYW5kIHJpZ2h0IHN1YnRyZWVzLlxyXG4gICAgICAgIHJvb3QubGVmdCA9IHRoaXMuYnVpbGRUcmVlKGFycmF5LCBzdGFydCwgbWlkIC0gMSk7XHJcbiAgICAgICAgcm9vdC5yaWdodCA9IHRoaXMuYnVpbGRUcmVlKGFycmF5LCBtaWQgKyAxLCBlbmQpO1xyXG5cclxuICAgICAgICByZXR1cm4gcm9vdDtcclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgdGVzdEFycmF5ID0gWzEsIDcsIDQsIDIzLCA4LCA5LCA0LCAzLCA1LCA3LCA5LCA2NywgNjM0NSwgMzI0XTtcclxuY29uc3QgdGVzdFRyZWUgPSBuZXcgVHJlZSh0ZXN0QXJyYXkpLnJvb3Q7XHJcblxyXG5jb25zdCBwcmV0dHlQcmludCA9IChub2RlLCBwcmVmaXggPSBcIlwiLCBpc0xlZnQgPSB0cnVlKSA9PiB7XHJcbiAgICBpZiAobm9kZSA9PT0gbnVsbCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAobm9kZS5yaWdodCAhPT0gbnVsbCkge1xyXG4gICAgICBwcmV0dHlQcmludChub2RlLnJpZ2h0LCBgJHtwcmVmaXh9JHtpc0xlZnQgPyBcIuKUgiAgIFwiIDogXCIgICAgXCJ9YCwgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5sb2coYCR7cHJlZml4fSR7aXNMZWZ0ID8gXCLilJTilIDilIAgXCIgOiBcIuKUjOKUgOKUgCBcIn0ke25vZGUuZGF0YX1gKTtcclxuICAgIGlmIChub2RlLmxlZnQgIT09IG51bGwpIHtcclxuICAgICAgcHJldHR5UHJpbnQobm9kZS5sZWZ0LCBgJHtwcmVmaXh9JHtpc0xlZnQgPyBcIiAgICBcIiA6IFwi4pSCICAgXCJ9YCwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgfTsgXHJcblxyXG5wcmV0dHlQcmludCh0ZXN0VHJlZSk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/app.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/app.js"]();
/******/ 	
/******/ })()
;